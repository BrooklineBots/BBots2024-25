package org.firstinspires.ftc.teamcode;

import java.io.FileWriter;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

public class AutonomousRecorder {
    private static final int RECORDING_DURATION = 35; // seconds
    private static final long SAMPLING_INTERVAL = 500; // ms Larger Values = Less Accurate Recording but smaller file sizes. 20 by default for java tick speeds.
    double frontLeftPower, frontRightPower, backLeftPower, backRightPower = 0.0;
    private FileWriter fileWriter;
    private boolean isRecording = true;
    private long startTime;

    public AutonomousRecorder() {
        initialize();
    }

    public static void main(String[] args) {
        new AutonomousRecorder();
    }

    public void setMotorPowers(double frontLeftPower, double frontRightPower, double backLeftPower, double backRightPower) {
        this.frontLeftPower = frontLeftPower;
        this.frontRightPower = frontRightPower;
        this.backLeftPower = backLeftPower;
        this.backRightPower = backRightPower;
    }

    private void initialize() {
        try {
            fileWriter = new FileWriter("/sdcard/autonomousRecord.java");
            writeHeader();
            startRecording();
        } catch (IOException e) {
            // Handle exception, perhaps log it
            isRecording = false;
        }
    }

    private void writeHeader() throws IOException {
        fileWriter.write("// Auto-generated by AutonomousRecorder\n");
        fileWriter.write("package robotcontrol;\n");
        fileWriter.write("\n");
        fileWriter.write("public class AutonomousPath {\n");
        fileWriter.write("    public static void main(String[] args) {\n");
        fileWriter.write("        // Motor control commands go here\n");
    }

    private void startRecording() {
        Timer timer = new Timer();
        TimerTask recordingTask = new TimerTask() {
            @Override
            public void run() {
                if (System.currentTimeMillis() - startTime < RECORDING_DURATION * 1000) {
                    captureAndWriteMotorStates();
                } else {
                    stopRecording();
                }
            }
        };

        timer.schedule(recordingTask, 0, SAMPLING_INTERVAL);
    }

    private void captureAndWriteMotorStates() {
        if (!isRecording) return;

        try {
            fileWriter.write("    drive.setMotors(" + frontLeftPower + ", " + frontRightPower + ", " + backLeftPower + ", " + backRightPower + ");\n");
        } catch (IOException e) {
            // Handle exception
        }
    }

    private void stopRecording() {
        isRecording = false;
        try {
            fileWriter.write("}\n");
            fileWriter.close();
        } catch (IOException e) {
            // Handle exception
        }
    }
}
