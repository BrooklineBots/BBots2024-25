package org.firstinspires.ftc.teamcode.autonomous;

import android.content.Context;
import android.os.Environment;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import android.content.Context;

public class AutonomousRecorder {
    private FileWriter fileWriter;
    private boolean isRecording = false;
    private boolean hasRecorded = false;

    public AutonomousRecorder(Context context) {
        try {
            File directory = context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS);
            if (directory != null) {
                File file = new File(directory, "AutonomousRecord.java");
                fileWriter = new FileWriter(file);
                writeHeader();
            } else {
                throw new IOException("External files directory is null");
            }
        } catch (IOException e) {
            e.printStackTrace();
            isRecording = false;
        }
    }

    public void giveCommand(String command) {
        if (!isRecording) return;

        try {
            fileWriter.write(command + "\n");
            fileWriter.flush(); // Ensure data is written immediately
        } catch (IOException e) {
            e.printStackTrace(); // Improved logging
        }
    }

    private void writeHeader() throws IOException {
        fileWriter.write("// Auto-generated by AutonomousRecorder\n");
        fileWriter.write("package robotcontrol;\n");
        fileWriter.write("\n");
        fileWriter.write("public class AutonomousPath {\n");
        fileWriter.write("    public static void main(String[] args) {\n");
        fileWriter.write("        // Motor control commands go here\n");
    }

    public boolean startRecording() {
        if (hasRecorded) {
            return false;
        }
        hasRecorded = true;
        isRecording = true;
        return true;
    }

    public void stopRecording() {
        isRecording = false;
        try {
            fileWriter.write("    }\n");
            fileWriter.write("}\n");
            fileWriter.flush(); // Flush before closing
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                fileWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public boolean getIsRecording() {
        return isRecording;
    }
}
