package org.firstinspires.ftc.teamcode.autonomous;

import android.content.Context;
import android.os.Environment;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class AutonomousRecorder {
    private FileWriter fileWriter;
    private boolean isRecording = false;
    private boolean hasRecorded = false;
    private long startTime;
    private long lastCommandTime;
    private long accumulatedSleep = 0;
    private boolean isStopped = false;

    public AutonomousRecorder(Context context) {
        try {
            File directory = context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS);
            if (directory != null) {
                File file = new File(directory, "AutonomousRecord.java");
                fileWriter = new FileWriter(file);
                writeHeader();
            } else {
                throw new IOException("External files directory is null");
            }
        } catch (IOException e) {
            e.printStackTrace();
            isRecording = false;
        }
    }

    public void giveCommand(String command) {
        if (!isRecording) return;

        long currentTime = System.currentTimeMillis();
        long delta = currentTime - lastCommandTime;
        boolean isStopCommand = command.contains(".stop();");

        try {
            if (isStopCommand) {
                if (!isStopped) {
                    // Transition to stopped state: write sleep and stop command
                    if (delta > 0) {
                        fileWriter.write("        sleep(" + delta + ");\n");
                    }
                    fileWriter.write("        drive.stop();\n");
                    fileWriter.write("        arm.stop();\n");
                    isStopped = true;
                } else {
                    // Already stopped: accumulate sleep time
                    accumulatedSleep += delta;
                }
            } else {
                // Transition to moving state: write accumulated sleep and new command
                if (isStopped) {
                    if (accumulatedSleep > 0) {
                        fileWriter.write("        sleep(" + accumulatedSleep + ");\n");
                        accumulatedSleep = 0;
                    }
                    isStopped = false;
                }
                if (delta > 0) {
                    fileWriter.write("        sleep(" + delta + ");\n");
                }
                fileWriter.write("        " + command + "\n");
            }
            fileWriter.flush();
            lastCommandTime = currentTime;
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void writeHeader() throws IOException {
        fileWriter.write("// Auto-generated by AutonomousRecorder\n");
        fileWriter.write("package org.firstinspires.ftc.teamcode.autonomous;\n" +
                                 "\n" +
                                 "import com.qualcomm.robotcore.eventloop.opmode.Autonomous;\n" +
                                 "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\n" +
                                 "\n" +
                                 "import org.firstinspires.ftc.teamcode.Subsystems.Arm;\n" +
                                 "import org.firstinspires.ftc.teamcode.Subsystems.Claw;\n" +
                                 "import org.firstinspires.ftc.teamcode.Subsystems.MecanumDrive;\n" +
                                 "\n" +
                                 "@Autonomous(name = \"Drive Auto CSV\", group = \"Autonomous\")\n" +
                                 "public class AutonomousPath extends LinearOpMode {\n" +
                                 "    private Arm arm;\n" +
                                 "    private Claw claw;\n" +
                                 "    private MecanumDrive drive;\n" +
                                 "\n" +
                                 "    @Override\n" +
                                 "    public void runOpMode() {\n" +
                                 "        arm = new Arm(hardwareMap, telemetry);\n" +
                                 "        claw = new Claw(hardwareMap, telemetry);\n" +
                                 "        drive = new MecanumDrive(hardwareMap, telemetry);\n");
    }

    public boolean startRecording() {
        if (hasRecorded) {
            return false;
        }
        hasRecorded = true;
        isRecording = true;
        startTime = System.currentTimeMillis();
        lastCommandTime = startTime;
        accumulatedSleep = 0;
        isStopped = false;
        return true;
    }

    public void stopRecording() {
        isRecording = false;
        try {
            long currentTime = System.currentTimeMillis();
            long delta = currentTime - lastCommandTime;

            if (isStopped) {
                accumulatedSleep += delta;
                if (accumulatedSleep > 0) {
                    fileWriter.write("        sleep(" + accumulatedSleep + ");\n");
                }
            } else if (delta > 0) {
                fileWriter.write("        sleep(" + delta + ");\n");
            }

            fileWriter.write("    }\n");
            fileWriter.write("}\n");
            fileWriter.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                fileWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public boolean getIsRecording() {
        return isRecording;
    }
}